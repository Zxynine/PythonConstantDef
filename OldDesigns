

# def CallableSingleton(CallCls):
# 	global EmptyTypes
# 	nullInstance = None
# 	ClsNew = CallCls.__new__
# 	def __new__(cls, *args, **kwargs):
# 		nonlocal nullInstance
# 		if nullInstance is None:
# 			nullInstance = ClsNew(cls, *args, **kwargs)
# 			return nullInstance
# 	def __call__(*args, **kwargs):
# 		nonlocal nullInstance
# 		return nullInstance
# 	def __eq__(null, other): return isinstance(other, EmptyTypes)
# 	def __ne__(null, other): return not isinstance(other, EmptyTypes)
# 	def __iter__(self): return iter([self,])
# 	if ClsNew is __new__ : return nullInstance
# 	CallCls.__new__ = __new__
# 	CallCls.__call__ = __call__
# 	CallCls.__iter__ = __iter__
# 	CallCls.__eq__ = __eq__
# 	CallCls.__ne__ = __ne__
# 	return CallCls()



def CallableSingleton(CallCls):
	global EmptyTypes
	nullInstance = None
	ClsNew = CallCls.__new__
	ClsName = CallCls.__name__

	class Singleton:
		def __new__(cls, *args, **kwargs):
			nonlocal nullInstance, CallCls
			if nullInstance is None:
				nullInstance = ClsNew(CallCls, *args, **kwargs)
				nullInstance.__dict__.update(Singleton.__dict__)
			return nullInstance

		def __call__(*args, **kwargs):
			nonlocal nullInstance
			return nullInstance
		def __eq__(null, other): return isinstance(other, EmptyTypes)
		def __ne__(null, other): return not isinstance(other, EmptyTypes)
		def __iter__(self): return iter([self,])
	Singleton()
	
	print(nullInstance)
	return nullInstance()






# def CallableSingleton(CallCls):
# 	global EmptyTypes
# 	nullInstance = None
# 	ClsNew = CallCls.__new__
# 	def __new__(cls, *args, **kwargs):
# 		nonlocal nullInstance
# 		if nullInstance is None:
# 			nullInstance = ClsNew(cls, *args, **kwargs)
# 			nullInstance.__instantiatedSingleton = True
# 		return nullInstance
# 	def __call__(*args, **kwargs):
# 		nonlocal nullInstance
# 		return nullInstance
# 	def __eq__(null, other): return isinstance(other, EmptyTypes)
# 	def __ne__(null, other): return not isinstance(other, EmptyTypes)
# 	def __iter__(self): return iter([self,])

# 	CallCls.__new__ = __new__
# 	CallCls.__call__ = __call__
# 	CallCls.__iter__ = __iter__
# 	CallCls.__eq__ = __eq__
# 	CallCls.__ne__ = __ne__
# 	return CallCls()

@CallableSingleton
class Null:pass

EmptyTypes = (type(None), type(Null))

if __name__ == '__main__':
	def printHeader(headName):
		print('\n' + '='*5 + ' ' + str(headName) + ' ' + '='*5)

	printHeader('Repeat access and calls')
	print(Null)
	print(Null)
	print(Null())
	print(Null())
	printHeader('Iteration')
	for i in Null(): print(i)
	printHeader('Own-Type equality')
	print(Null == Null)
	print(Null != Null)
	print(Null == Null())
	print(Null() != Null)
	printHeader('None-Type equality')
	print(Null == None)
	print(Null != None)
	print(Null() == None)
	print(Null() != None)
	printHeader('None-Type reversed equality')
	print(None == Null)
	print(None != Null)

# def singleton(wrapCls):
# 	instance = None
# 	ClsNew = wrapCls.__new__
# 	@wraps(wrapCls.__new__)
# 	def __new__(cls, *args, **kwargs):
# 		nonlocal instance
# 		if instance is None: instance = ClsNew(cls, *args, **kwargs)
# 		return instance
# 	wrapCls.__new__ = __new__
# 	return wrapCls



# def singleton(class_):
#     instances = {}
#     def getinstance(*args, **kwargs):
#         if class_ not in instances:
#             instances[class_] = class_(*args, **kwargs)
#         return instances[class_]
#     return getinstance

# @singleton
# class MyClass(BaseClass):
#     pass




# def TrueStatic(CallCls):
# 	global EmptyTypes
# 	def __init_subclass__(self, **kwargs):
# 		super(CallCls, self).__init__subclass__(**kwargs)
# 		print('Q'*10)


# 	CallCls.__init_subclass__ = classmethod(__init_subclass__)



# 	nullInstance = CallCls()


# 	CallCls.__new__ = lambda *args, **kwargs: nullInstance
# 	CallCls.__call__ = lambda *args, **kwargs: nullInstance
# 	CallCls.__eq__ = lambda null,compare:isinstance(compare,EmptyTypes)
# 	CallCls.__ne__ = lambda null,compare: not isinstance(compare,EmptyTypes)
# 	CallCls.__iter__ = lambda self: iter([self,])
# 	CallCls.__init__ = lambda self, *args, **kwargs: None
# 	return nullInstance

# def TrueStatic(CallCls):
# 	global EmptyTypes
# 	class IterType(type):
# 		def __iter__(cls): return iter([cls,])
# 	class NonInheritable(CallCls, metaclass=IterType):
# 		__init__ = lambda self, *args, **kwargs: None
# 		__new__ = lambda *args, **kwargs: nullInstance
# 		__call__ = lambda *args, **kwargs: nullInstance
# 		__eq__ = lambda null,compare:isinstance(compare,EmptyTypes)
# 		__ne__ = lambda null,compare: not isinstance(compare,EmptyTypes)
# 		__iter__ = lambda self: iter([self,])
# 		def __init_subclass__(self, **kwargs):
# 			print('Qqqqqqqqqqqqq')
# 			# super(NonInheritable, self).__init__subclass__(**kwargs)
# 	nullInstance = type('Null', (NonInheritable, CallCls), {})
# 	# nullInstance.__dict__ = dict(NonInheritable.__dict__)
# 	# nullInstance.__class__ = NonInheritable
# 	return nullInstance



# def TrueStatic(CallCls):
# 	global EmptyTypes
# 	nullInstance = CallCls()
# 	def __init_subclass__(self, **kwargs):
# 			super(CallCls, self).__init__subclass__(**kwargs)
# 			print('Q'*10)
# 	class NonInheritable:
# 		__init__ = lambda self, *args, **kwargs: None
# 		__new__ = lambda *args, **kwargs: nullInstance
# 		__call__ = lambda *args, **kwargs: nullInstance
# 		__eq__ = lambda null,compare:isinstance(compare,EmptyTypes)
# 		__ne__ = lambda null,compare: not isinstance(compare,EmptyTypes)
# 		__iter__ = lambda self: iter([self,])
# 		def __init_subclass__(self, **kwargs):
# 			print('Qqqqqqqqqqqqq')
# 			super(nullInstance, self).__init__subclass__(**kwargs)

# 	nullInstance.__init_subclass__ = classmethod(__init_subclass__)

# 	nullInstance.__new__ = lambda *args, **kwargs: nullInstance
# 	nullInstance.__call__ = lambda *args, **kwargs: nullInstance
# 	nullInstance.__eq__ = lambda null,compare:isinstance(compare,EmptyTypes)
# 	nullInstance.__ne__ = lambda null,compare: not isinstance(compare,EmptyTypes)
# 	nullInstance.__iter__ = lambda self: iter([self,])
# 	nullInstance.__init__ = lambda self, *args, **kwargs: None
# 	nullInstance.__class__ = NonInheritable
# 	return nullInstance
# def TrueStatic(CallCls):
# 	_Declaring = True
# 	global EmptyTypes
# 	nullInstance = None
# 	class IterType(type):
# 		def __iter__(cls): return iter([cls,])
# 		def __eq__(null,compare): return isinstance(compare,EmptyTypes)
# 		def __ne__(null,compare): return not isinstance(compare,EmptyTypes)
# 	lambdaIdentity = lambda *args, **kwargs: nullInstance
# 	lambdaBlocker = lambda ExceptionMessage: lambda *args, **kwargs: exec("raise(TypeError('" + ExceptionMessage + "'))")
# 	class NonInheritable(CallCls, metaclass=IterType):
# 		__init__ = lambda *args, **kwargs: nullInstance
# 		__new__ = lambda *args, **kwargs: nullInstance
# 		__call__ = lambda *args, **kwargs: nullInstance
# 		__init_subclass__ = lambda *args, **kwargs: nullInstance
# 	nullInstance = type(CallCls.__name__, (NonInheritable, CallCls), {})
# 	NonInheritable.__init_subclass__ = lambda *args:exec("raise(TypeError('The parent class does not support inheritance!'))")
# 	IterType.__setattr__ = lambda self, name, value: exec("raise(TypeError('The parent class does not support assignment!'))")
# 	IterType.__getattr__ = lambda self, name: exec("raise(TypeError('The parent class does not allow attribute access!'))")
# 	return nullInstance


def Constant(*types):
	def TypedConstant(CallCls, *TypeCases):
		nullInstance = None
		class IterType(type):
			def __iter__(cls): return iter([cls,])
			def __eq__(null,compare): return isinstance(compare,(type(null), *TypeCases))
			def __ne__(null,compare): return not isinstance(compare,(type(null), *TypeCases))
		lambdaIdentity = lambda *args, **kwargs: nullInstance
		lambdaException = lambda ExceptionMessage: lambda *args, **kwargs: exec("raise(TypeError('"+ExceptionMessage+"'))")
		class NonInheritable(CallCls, metaclass=IterType):
			__init__ = lambdaIdentity
			__new__ = lambdaIdentity
			__call__ = lambdaIdentity
			__init_subclass__ = lambdaIdentity
		nullInstance = type(CallCls.__name__, (NonInheritable, CallCls), {})
		NonInheritable.__init_subclass__ = lambdaException(f'The parent class "{CallCls.__name__}" does not support inheritance!')
		IterType.__setattr__ = lambdaException(f'The parent class "{CallCls.__name__}" does not support assignment!')
		IterType.__getattr__ = lambdaException(f'The parent class "{CallCls.__name__}" does not allow attribute access!')
		return nullInstance
	if len(types)==0: return TypedConstant
	return lambda cls: TypedConstant(cls, *types)


		
# def Constant(*types, getGeneric = False):
# 	def TypedConstant(CallCls, *TypeCases, default=ConstantType):
# 		nullInstance = None
# 		lambdaIdentity = lambda *args, **kwargs: nullInstance
# 		lambdaException = lambda ExceptionMessage: lambda *args, **kwargs: exec("raise(TypeError('"+ExceptionMessage+"'))")
# 		class IterType(type):
# 			def __new__(self,name,bases,attrs,**kwargs): return super().__new__(self,name,bases,attrs,**kwargs)
# 			def __iter__(cls): return iter([TypeCases[0] if len(TypeCases) != 0 else default,])
# 			def __next__(self): raise StopIteration
# 			def __eq__(to,compare): return isinstance(compare,(type(to), *TypeCases)) or compare is default
# 			def __ne__(to,compare): return not (isinstance(compare,(type(to), *TypeCases)) or compare is default)
# 		class NonInheritable(CallCls):
# 			__init__ = lambdaIdentity
# 			__new__ = lambdaIdentity
# 			__call__ = lambdaIdentity
# 			__init_subclass__ = lambdaIdentity
# 		nullInstance = IterType(CallCls.__name__, (NonInheritable, CallCls, default), {})
# 		nullInstance.__init_subclass__ = lambdaException(f'The parent class "{CallCls.__name__}" does not support inheritance!')
# 		IterType.__setattr__ = lambdaException(f'The parent class "{CallCls.__name__}" does not support assignment!')
# 		IterType.__getattr__ = lambdaException(f'The parent class "{CallCls.__name__}" does not allow attribute access!')
# 		return nullInstance
# 	if getGeneric: return 
# 	if len(types)==0: return TypedConstant
# 	return lambda cls: TypedConstant(cls, *types)
